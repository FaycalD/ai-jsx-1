import {loadJsonFile} from 'load-json-file';
import path from 'node:path';
import { fileURLToPath } from 'node:url';
import fs from 'fs/promises';


const currentPath = path.dirname(fileURLToPath(import.meta.url));
const packageRoot = path.resolve(currentPath, '..', '..');

interface PackageJson {
  exports: Record<string, {
      import: {
        types: string;
        default: string;
      }
      require: {
        types: string;
        default: string;
      }
    }>
}

const packageJson = await loadJsonFile<PackageJson>(path.resolve(packageRoot, 'package.json'));

async function writeFile(filePath: string, contents: string) {
  const dirname = path.dirname(filePath);
  await fs.mkdir(dirname, {recursive: true});
  return fs.writeFile(path.join(packageRoot, filePath), 
  `// Auto-generated by ${import.meta.url}. Do not edit.
  
${contents}\n`, 'utf8');
}

// Iterate through each export entry
for (const [exportKey, exportValue] of Object.entries(packageJson.exports)) {
  const importObj = exportValue.import;
  const requireObj = exportValue.require;

  const filePath = exportKey === '.' ? 'index' : exportKey.slice('./'.length);

  await writeFile(`${filePath}.js`, `export * from '${importObj.default}'`)
  await writeFile(`${filePath}.d.ts`, `export * from '${importObj.types}'`)
  await writeFile(`${filePath}.cjs`, `module.exports = require('${requireObj.default}')`)
}